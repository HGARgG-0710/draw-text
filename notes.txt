1. IDEA: create means to program curves ... (?using functions/Infinite series? some recursive name-giving mini-language?); 
	Consider how to factor them into the syntax...;

	ALSO - additional functionality: 

		1. Bezier curve; 	

			Use the already present quadraticCurve/cubicBezierCurve to define higher order curves
			(use recursive definition + points construction...); 

		2. generalization of 'roundRect' (for pretty things and UI...) - 'roundPolygon';

			line-join is good, however, it can make creating complex shapes with changing of round-sharp corners somewhat unconventional; 
			Due to this, one would like to use the 'lineJoin' only as the default, while the temporary changes are also possible via this new construction; 

			To set a given point '(...)' to 'round' do "r(...)", for other values - corresponding modifiers. 

		3. strokeText [add text to draw-text...]; 
		4. setLineDash (for dotted lines)
		5. fillText;
		6. drawImage (images!!! - implement together with the paths, arguments variables and file-running instead of necessarily getting the text from 'textarea' field);
		7. createPattern (return type - a 'colour');

		8. A transparency argument...; 

			Allow ALL the places that use colours (including the 'background' and others), 
			to have a transparency argument. will allofr for some powerful effects

		9. lineDashOffset ('dash-offset' property)
		10. gradients - conic, linear and radial (those that Canvas supports); 
		11. fill-rule (single-value property for setting fill rules - 'evenodd' or 'nonzero');
		12. shadow (command for shadows; takes arguments' shape of '(offsetx, offsety) blur? color?')
		13. font (property; for doing text-stroking/fillling); 

		14. filter; 
		15. clip; 
		16. transform - useful for skewing something; 
			This one - as a pure 'points-only' operator with the sintax: 
				'T(a,b,c,d,e,f)(x, y)'
			Value - new point. 

		Whole separate, under question: 
		17. Animations? [more complex, doing will require finding a finite set of elementary operations equivalent in power to multi-layer structures such as 'for-loops' in the sense of determining the algorithms...];

			IDEA: add eleven instructions: 

				1. computation {...} - a computation cycle - it [effectively] causes a re-computation of variables on each render (there is a special 'time' variable which tracks the current render frame); NOTE: the screen is updated, then flushed every frame;
				2. start - for starting the computation
				3. stop - for stopping the computation
				4. do-when condition {...} - executes the block, when given condition is true (NOTE: this is asynchronous - that is, it tracks the state of the program and does something when a thing reaches it...);
				5. jump-if condition label - if given condition is true, then jumps to the label (or line, if it's a number and no such label already) in question;
				6. label labelname - creates a new label on a given line; 
				7. do-if condition {...} - synchronous version of 'do-when'; condition checked only once
				8. jump-when condition label - asynchronous version of 'jump-if', same as 'do-when' is for 'do-if';
				9. loop {...} - defines an infinite loop; 
				10. break - breaks out of current loop
				11. do-every condition {...} - every step of a loop [any loop] checks for the given condition, and if true - does what is inside of a block...; 
			
			Idea: add capabilities of a small web-game engine? 
				Can create a game with canvas, then - download as an iframe element that can be included onto a webpage (+styles for it...);
				NOTE: this will require: 

					1. draw-text code to JavaScript compilation; 
					2. new [more sophisticated] editor - particularly, FOR SCREEN/WINDOW SIZES (dynamic ones, too)!
					3. [not essential, but good to have] Ability to compile the game with desired paths for images and so forth. 
					4. [KEY!] The user input capabilities; 
			
			Idea: for data-storage, one can use the client + JSON: 

				1. json{...} - an expression, result of which is a JSON-string of whatever is passed to 'json'
				2. from-json filepath - reads a filepath 
			
		18. clear - good for animation, resets the Canvas...; 

2. IDEA: add an .svg of some draw-text example to the README...;
3. IDEA: add more details to the page's HTML and CSS; 
	Examples: images for a more 'sophisticated' layout, gradient, multicolours, that kind of thing...;
4. CSS is good (adaptive for SOME screens..., computer screens for instance...), but not good enough for the app to be easily (comfortably) used on mobile devices...;
	For them - choose different proportions. 
	The values of phones are FARRR too different. 
	They are not height-oriented, but rather width-oriented...; 
5. IDEA: add 'comment's into the project's language's vocabulary...; 
	Useful for designation of particular elements of images, in the cases of certain complexity. 
6. IDEA [visual design]: add a generation of random pattern to the sides of the page (current space-rect); 
	Think whether the pattern would be recurring, or it would create new colours each time user would 
		change the canvas size (thus increasing the page size...); 
	Also - consider how they'd be generated (that is, how would the colour pattern be chosen...
		What vector-function of n>=2 colour components - RGB/other - to pick/construct?)
	
	NOTE UPDATE: now, it comes down to changing the background - the task became more chanllenging, but also far more fun! 
	Think about it...; 
	
7. Idea: add support for a 'point'-datatype to the parser; 

	Allows one to store (in variables) individual points instead of simply x/y/color coordinates of a point...;

8. A website Favicon - add it; 

	Think of something pretty. Draw it with 'draw-text'; 
	Then, use as a favicon (an .svg...); 

9. Arithmetic! 

	Add arithmetic for those expressions (simple addition, multiplication, division, subtraction and modulo ought to do it by now...); 
	Add simple case static/strong typezation typezation 
		(or, more precisely, add another layer of correctness-checking - now the program would also have to be sound from type-standpoint of view, 
			besides only just adequate parsibility); 
	Also - when implementing, add the rationals (at least the finite ones) and additive inverses support (in particular - for angles). 

	Also - the booleans and trigonometric functions (sin, cos, tan); 

10. Add arguments; 

	Syntax: [! or % or $ or @]n, where 'n' is the number of the argument...; 'n' can be an expression (so is, for instance, calculated); 

	[useful with images, paths and filereading];

11. Add filereading: 

	For text files only (getting stroke-Text strings, colours, numbers and points); 

12. Add "string" type: 

	Easier to parse this way. Would be used for textual information; 

13. Add a simple 'compiler' program for draw-this code: 

	Would, in truth, simply substitute the argument-variables for static values, provided by the user; 
	Eliminates the need for further user input;

	Also - eliminates inner calls from other files 
		(if they are available - puts the code inside with appropriate name collisions in vars fixed (when required), otherwise - a compiler error); 
	
14. Add file-running commands: 

	Two directives: 

		1. run filepath [...arguments] - runs a given file within the context of the present canvas (without merging variable spaces); 
		2. paste filepath [...arguments] - pastes the code of the given file into the present one (note: IT DOES NOT HAVE TO BE CORRECT AS OF SELF, variables can be undefined, for instance);

15. Add a way to access the command-properties (such as 'radius'): 

	For instance, add a special symbol (like % or $, or @, or !) to get their values [those will be ignored by the 'validate' function]; 

16. Add more complex data structures: 

	For instance - arrays: 

		1. array x [...] - expression for defining an array
		2. x[...] - indexation
		3. array x ind1 val1, ind2 val2, ... - set a value for an array's index (can be repeated)
		4. array x ind - delete index 'ind' from array (performs backwards shift of all the latter values);
		5. enumeration x start next-ind {...} - enumerates all the items in the array, where 'start' is the initial index and 'next-ind' is the gap value for each next index to enumerate (an expression, evaluated at every turn);
			This is particularly powerul and useful, because in a single stroke it elegantly generalizes: 

				1. classical for-loops (just use '1');
				2. every 'nth' item of the array (use 'n');
				3. other, more complex cases;
	
		6?. Some functions for arrays (like, 'slice' or 'map'? Would make development far easier, however, would increase the number of operators...):
	
17. Idea [possibly, not good]: functions!

	They would be evaluated as a set of compilation-structures, 
		namely - for them there'd exist a separate process for putting those out as a script in an alternative file (so as to replace 'function's with 'run's);
	This'd be a special 'de-function' code operation (for it, too, a script would be written...); 
	There'd also exist an alternative implementation that uses JS functions: 

		function name {
			...
		}
	
	The i'th argument of n-level function is accessed via "$[repeat n]$i", whereas "$i" is used for script argument [0-level function];

18. Add code highlighting for the on-the-website editor? 

	Keywords-colouring, at least, and underline matching brackets when near them...;

19. Extend the module for svg support!

	The 'js/svg.mjs' is a module needed to ensure the svg support on the website; 

	As the Canvas API doesn't natively support working with SVG API 
		(and the code in widely used libraries is largely total crap), 
		one is going to write a library of one's own 
			(first as a submodule of Draw-Text, then - as a separate thing...)
		
20. IDEA: separate the website code and the code of the PL: 	

	Create a separate repo of DTPL (draw-text programming language), 
	specifically for everything related to the language; 

	Then, keep the website ONLY as the usage of all that functionality + components...; 

	Note: code structure is starting to get too messy and unwieldy. 

21. IDEA [possibly, a bad one]: Add 3d! 

	After having completed the game engine, animation and all the other functionalities, 
		add the third dimension.
	[?webgl for this cause, mayhaps?]

22. IDEA [SVG-extension]: 

	Previously (in 1.), features from Canvas were decided to be added to the website as wrappers (namely, the extension of the power of draw-text); 
	Now, as one started implementing the SVG compatibility of the format, it is time to consider doing the same with it; 
	Only those that do not contradict the concept of the project's generality + syntax-minimalism and 'flatness' + predominant native types (such as colours); 

	Current list of new features (tags/attributes) to add: 

		1. <textPath>
	
23. THE MINIMUM SIZE OF POINTS IS SLIGHTLY LIMITED... 

	Just another reminder - due to the fact that there are no floats in the typesystem (yet), 
	there's a VERY large number of beautiful ellipse-sizes not available (in the angle argument); 
	
	That is particularly visible when ellipses are large enough - those sub-degrees could make a very real (and, ofttimes, essential) difference. 
	The floats have just grown in importance...; 

24. IDEA: add functionalities (for 2d): 

	1. WebGL; 
	2. WebGPU; 

	Similarly, for 3D;

	This will permit the more "serious" implementation of a mini-web-game-engine idea
		(for it to become 'not so mini' anymore...); 
	
	IDEA: also - create not only the API layers for them, but ways for representation AS WELL! 

		So, say, there'd be a separate screens for: 

			1. SVG (animation, scripts AND images); 
			2. WebGL; 
			3. WebGPU; 
			4. Canvas (already present); 

		Would look (CSS) the same, but behave in accordance with given APIs; 
		All can be exported as desired; 
		[SVG is perfect, because it's ALREADY a format that is scriptable...]; 