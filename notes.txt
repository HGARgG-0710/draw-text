0. TODO: re-do the project... [the JavaScript only, all else is more-or-less fine]
	1. Use TypeScript this time
		Employ Java-like code, classes more actively. 
		Better for maintainability. 
	2. Use `parsers.js` for the draw-text's grammar [parser + validator]
	3. Refactor this thing (mightily)
	4. Add a proper architecture (or a something close to it, anyway...)
	5. Fix the bloody SVG alrady [lib - svg.js] + the ellipses
	6. Ensure cross-browser compatibility
	7. Complete all the (remaining) TODOs in here
	8. 

1. IDEA: create means to program curves ... (?using functions/Infinite series? some recursive name-giving mini-language?); 
	Consider how to factor them into the syntax...;

	ALSO - additional functionality: 

		1. Bezier curve; 	

			Use the already present quadraticCurve/cubicBezierCurve to define higher order curves
			(use recursive definition + points construction...); 

		2. generalization of 'roundRect' (for pretty things and UI...) - 'roundPolygon';

			line-join is good, however, it can make creating complex shapes with changing of round-sharp corners somewhat unconventional; 
			Due to this, one would like to use the 'lineJoin' only as the default, while the temporary changes are also possible via this new construction; 

			To set a given point '(...)' to 'round' do "r(...)", for other values - corresponding modifiers. 

		3. setLineDash (for dotted lines)
		4. drawImage (images!!! - implement together with the paths, arguments variables and file-running instead of necessarily getting the text from 'textarea' field);
		5. createPattern (return type - a 'colour');

		6. lineDashOffset ('dash-offset' property)
		7. gradients - conic, linear and radial (those that Canvas supports); 
		8. fill-rule (single-value property for setting fill rules - 'evenodd' or 'nonzero');
		9. shadow (command for shadows; takes arguments' shape of '(offsetx, offsety) blur? color?')
		10. font (property; for doing text-stroking/fillling); 

		11. filter; 
		12. clip; 
		13. transform - useful for skewing something; 
			This one - as a pure 'points-only' operator with the sintax: 
				'T(a,b,c,d,e,f)(x, y)'
			Value - new point. 

		14. clear - good for animation, resets the Canvas...; 

2. IDEA: add an .svg of some draw-text example to the README...;
3. IDEA: add more details to the page's HTML and CSS; 
	Examples: images for a more 'sophisticated' layout, gradient, multicolours, that kind of thing...;
4. CSS is good (adaptive for SOME screens..., computer screens for instance...), but not good enough for the app to be easily (comfortably) used on mobile devices...;
	For them - choose different proportions. 
	The values of phones are FARRR too different. 
	They are not height-oriented, but rather width-oriented...; 

5. add 'comment's into the project's language's vocabulary...; 
	Useful for designation of particular elements of images, in the cases of certain complexity. 

6. The website's Favicon - add it; 
	Think of something pretty. Draw it with 'draw-text'; 
	Then, use as a favicon (an .svg...); 

	Idea: a [slightly "edgy"] brush with paint on its end on top of a palette [drawn with `-` - as a curve]; 

7. Arithmetic! 
	Add arithmetic for those expressions (simple addition, multiplication, division, subtraction and modulo ought to do it by now...); 
	Includes: 
		0. (proper) braces, order-of-operations/BOMDAS
		1. floats
		2. "strong" operations - numbers can't be added to colours, etc
		3. booleans (boolean arithmetic/operators) and trigonometric functions (sin, cos, tan): 
			Specifically - it (should) be possible to read a given 'param' as a boolean value, then 
				employ it as a part of a `boolean arithmetic` expression. Then - that can be converted 
					(implicitly) to 1/0 during the cours of a FURTHER arithmetic parent-expression. 

8. Add script arguments
	Syntax: [! or % or $ or @]n, where 'n' is the number of the argument...; 'n' can be an expression (so is, for instance, calculated); 
	[useful with images, paths and filereading];
	
9. Add file-running commands: 

	Three directives: 

		0. load-file "FileLabel" "filepath" - loads a file to be known under the "FileLabel" label 
		1. run "FileLabel" [...arguments] - runs a given file within the context of the present canvas (without merging variable spaces); 
		2. paste "FileLabel" [...arguments] - pastes the code of the given file into the present one (note: IT DOES NOT HAVE TO BE CORRECT AS OF SELF, variables can be undefined, for instance);

10. Add a way to access the command-properties (such as 'radius'): 
	For instance, add a special symbol (like % or $, or @, or !) to get their values [those will be ignored by the 'validate' function]; 
	
11. Extend the module for svg support!

	The 'js/svg.mjs' is a module needed to ensure the svg support on the website; 

	As the Canvas API doesn't natively support working with SVG API 
		(and the code in widely used libraries is largely total crap), 
		one is going to write a library of one's own 
			(first as a submodule of Draw-Text, then - as a separate thing...)
		
12. IDEA [SVG-extension]: 

	Previously (in 1.), features from Canvas were decided to be added to the website as wrappers (namely, the extension of the power of draw-text); 
	Now, as one started implementing the SVG compatibility of the format, it is time to consider doing the same with it; 
	Only those that do not contradict the concept of the project's generality + syntax-minimalism and 'flatness' + predominant native types (such as colours); 

	Current list of new features (tags/attributes) to add: 

		1. <textPath>
	
13. THE MINIMUM GRANULARITY OF POINTS IS SLIGHTLY LIMITED... 
	Just another reminder - due to the fact that there are no floats in the typesystem (yet), 
	there's a VERY large number of beautiful ellipse-sizes not available (in the angle argument); 
	
	That is particularly visible when ellipses are large enough - those sub-degrees could make a very real (and, ofttimes, essential) difference. 
	The floats have just grown in importance...; 

14. FEATURE TO ADD: 

	param inside-round [true/false]: 

		A boolean parameter determining whether the insides of corners are to be round (by default in both Canvas and SVG, they're not);
		This (effectively), draw an 'inside-shadow' of the given thing with round corners; 
	
15. Ensure cross-browser compatibility!