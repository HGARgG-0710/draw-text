1. IDEA: re-do the thing in React? 
	There's a lot of same 'types' (kinds/classes) of elements repeating throughout the HTMl of the page. 
	Starts to bugger oneself a little bit. React-based refactoring could remedy it.

2. IDEA: create means to program curves ... (?using functions/Infinite series? some recursive name-giving mini-language?); 
	Consider how to factor them into the syntax... (?use '-' instead of '->' for them?);

	ABOUT CIRCLES: 

		More general - replace them with ellipses. 
		Input shape: 

			(startX, startY)-(angle, ?startAngle, ?endAngle, ?rotation)(endX, endY)
		
		1. 'angle' - angle between the point that is to be the center of the future ellipse and '(startX, startY)'. 
			Together with the end coordinate, sufficient to find the required data to draw the ellipse on the path using 'ellipse'; 
		2.-4. (rotation, startAngle, endAngle) are the same as in 'ellipse' documentation of Canvas

		By default, first argument is 'startAngle', 'rotation' is 0 and 'endAngle' is 2*pi ('startAngle' is 0 too so as to make a full ellipse...);

		
	ALSO - additional functionality: 

		1. Bezier curves (quadraticCurveTo and bezierCurveTo do a quadratic and cubic one correspondently, see if others are feasible to either implement using it or manually...); 
		2. roundRect (for pretty things and UI...);
		3. strokeText [add text to draw-text...]; 
		4. setLineDash (for dotted lines)
		5. fillText;
3. IDEA: for README, draw something pretty! [in a minimalistic-cubistic-style? how about a Bloodborne hunter picture? Or one of one's characters?]
4. IDEA: add more details to the page's HTML and CSS; 
	Examples: images for a more 'sophisticated' layout, gradient, multicolours, that kind of thing...;
5. CSS is good (adaptive for SOME screens..., computer screens for instance...), but not good enough for the app to be easily (comfortably) used on mobile devices...;
	For them - choose different proportions. 
	The values of phones are FARRR too different. 
	They are not height-oriented, but rather width-oriented...; 
6. ?Add more canvas programmatic properties to the project? 
	Ideally, the final thing ought to be something of a total-Canvas-drawing-API-wrapper, 
		but reformulated purely in terms of shapes (that being, 
			the entire programming paraphanalia is taken out - only these elementary instructions remain). 
7. IDEA: add 'comment's into the project's language's vocabulary...; 
	Useful for designation of particular elements of images, in the cases of certain complexity. 
8. IDEA [visual design]: add a generation of random pattern to the sides of the page (current blue-rect); 
	Think whether the pattern would be recurring, or it would create new colours each time user would 
		change the canvas size (thus increasing the page size...); 
	Also - consider how they'd be generated (that is, how would the colour pattern be chosen...
		What vector-function of n>=2 colour components - RGB/other - to pick/construct?)
	
9. Idea: add support for a 'point'-datatype to the parser; 

	Allows one to store (in variables) individual points instead of simply x/y/color coordinates of a point...;

10. A website Favicon - add it; 

	Think of something pretty. Draw it with 'draw-text'; 
	Then, use as a favicon (an .svg...); 

11. Arithmetic! 

	Add arithmetic for those expressions (simple addition, multiplication, division and subtraction ought to do it by now...); 

12. Add input from file (giving a file with 'draw-text' code...);